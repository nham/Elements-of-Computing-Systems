// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Decodes instruction by opcode
    DMux(in=true, sel=instruction[15], a=Ainst, b=Cinst);

    // jump calculation
    And(a=Cinst[2], b=ng, out=j1);
    And(a=Cinst[1], b=zr, out=j2);
    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);
    Or(a=notzr, b=notng, out=j3a);
    Not(in=j3a, out=j3b);
    And(a=Cinst[0], b=j3b, out=j3);
    Or8Way(in[0]=j1, in[1]=j2, in[2]=j3, in[3..7]=false, out=jump);

    //A-register
    Or(a=Ainst, b=Cinst[5], out=Aload);
    Mux16(a=ALU, b=instruction, sel=Ainst, out=Ainp);
    Register(in=Ainp, load=Aload, out=Aout);

    PC(in=Aout, reset=reset, inc=true, load=jump, out[0..14]=pc);

    ALU(x=, y=, zx=, nx=, zy=, ny=, f=, no=,
        out=ALU, zr=zr, ng=ng);
}
